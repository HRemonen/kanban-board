basePath: /api/v1
definitions:
  model.APIBoard:
    properties:
      description:
        type: string
      id:
        type: string
      lists:
        items:
          $ref: '#/definitions/model.List'
        type: array
      name:
        type: string
      userID:
        type: string
    type: object
  model.Board:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      lists:
        items:
          $ref: '#/definitions/model.List'
        type: array
      name:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  model.BoardUserInput:
    properties:
      description:
        maxLength: 100
        type: string
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
      - name
    type: object
  model.Card:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      label:
        type: string
      listID:
        type: string
      position:
        type: integer
      status:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  model.CardPositionInput:
    properties:
      position:
        minimum: 0
        type: integer
    type: object
  model.CardUserInput:
    properties:
      title:
        maxLength: 50
        minLength: 3
        type: string
    required:
      - title
    type: object
  model.List:
    properties:
      boardID:
        type: string
      cards:
        items:
          $ref: '#/definitions/model.Card'
        type: array
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      position:
        type: integer
      updatedAt:
        type: string
    type: object
  model.ListPositionInput:
    properties:
      position:
        minimum: 0
        type: integer
    type: object
  model.ListUserInput:
    properties:
      name:
        maxLength: 20
        minLength: 1
        type: string
    required:
      - name
    type: object
  model.LoginData:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.LoginUserInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  model.RegisterUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      passwordConfirm:
        type: string
    required:
      - email
      - name
      - password
      - passwordConfirm
    type: object
  model.UpdateUser:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  model.User:
    properties:
      boards:
        items:
          $ref: '#/definitions/model.Board'
        type: array
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      photo:
        type: string
      provider:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
  model.UserResponse:
    properties:
      boards:
        items:
          $ref: '#/definitions/model.Board'
        type: array
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      provider:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: http://github.com/HRemonen/kanban-board/
  description: Kanri is a Kanban board application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://github.com/HRemonen/kanban-board/
  title: Kanri API
paths:
  /auth/login:
    post:
      description: login user and generate JWT token
      parameters:
        - description: Login attributes
          in: body
          name: login_attrs
          required: true
          schema:
            $ref: '#/definitions/model.LoginUserInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/model.LoginData'
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Login user
      tags:
        - Login
  /board:
    get:
      description: get all boards
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.APIBoard'
            type: array
        '404':
          description: Not Found
          schema:
            type: object
      summary: Get all boards
      tags:
        - Boards
    post:
      consumes:
        - application/json
      description: create a new board
      parameters:
        - description: Board attributes
          in: body
          name: board_attrs
          required: true
          schema:
            $ref: '#/definitions/model.BoardUserInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/model.APIBoard'
        '400':
          description: Bad Request
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Create a new board
      tags:
        - Boards
  /board/{id}:
    delete:
      description: delete a board by ID
      parameters:
        - description: Board ID
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
      summary: Delete a board by ID
      tags:
        - Boards
    get:
      description: get a single board
      parameters:
        - description: Board ID
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/model.APIBoard'
        '404':
          description: Not Found
          schema:
            type: object
      summary: Get a single board
      tags:
        - Boards
  /board/{id}/list:
    post:
      consumes:
        - application/json
      description: create a new list for a board
      parameters:
        - description: Board ID
          in: path
          name: id
          required: true
          type: string
        - description: List attributes
          in: body
          name: list_attrs
          required: true
          schema:
            $ref: '#/definitions/model.ListUserInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/model.List'
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Create a new list for a board
      tags:
        - Boards
  /board/{id}/list/{list}:
    delete:
      description: delete a list from board
      parameters:
        - description: Board ID
          in: path
          name: id
          required: true
          type: string
        - description: List ID
          in: path
          name: list
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
      summary: Delete a list from board
      tags:
        - Boards
    put:
      consumes:
        - application/json
      description: update list position on the board
      parameters:
        - description: Board ID
          in: path
          name: id
          required: true
          type: string
        - description: List ID
          in: path
          name: list
          required: true
          type: string
        - description: List position
          in: body
          name: position
          required: true
          schema:
            $ref: '#/definitions/model.ListPositionInput'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/model.List'
        '304':
          description: Not Modified
          schema:
            type: object
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Update list position on the board
      tags:
        - Boards
  /card/{id}:
    get:
      description: get a single card by ID
      parameters:
        - description: Card ID
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/model.Card'
        '404':
          description: Not Found
          schema:
            type: object
      summary: Get a single card by ID
      tags:
        - Cards
  /google/login:
    post:
      description: Google OAuth login
      responses: {}
      summary: Google OAuth login
      tags:
        - Login
  /list/{id}/card:
    post:
      consumes:
        - application/json
      description: create a new card for a list
      parameters:
        - description: List ID
          in: path
          name: id
          required: true
          type: string
        - description: Card attributes
          in: body
          name: card_attrs
          required: true
          schema:
            $ref: '#/definitions/model.CardUserInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/model.Card'
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Create a new card for a list
      tags:
        - Cards
  /list/{id}/card/{card}:
    delete:
      description: delete a card from list
      parameters:
        - description: List ID
          in: path
          name: id
          required: true
          type: string
        - description: card ID
          in: path
          name: card
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
      summary: Delete a card from list
      tags:
        - Cards
    put:
      consumes:
        - application/json
      description: update card position on the list
      parameters:
        - description: List ID
          in: path
          name: id
          required: true
          type: string
        - description: Card ID
          in: path
          name: card
          required: true
          type: string
        - description: Card position
          in: body
          name: position
          required: true
          schema:
            $ref: '#/definitions/model.CardPositionInput'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/model.Card'
        '304':
          description: Not Modified
          schema:
            type: object
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Update card position on the list
      tags:
        - Cards
  /user:
    get:
      description: get all users
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        '404':
          description: Not Found
          schema:
            type: object
      summary: Get all users
      tags:
        - Users
    post:
      consumes:
        - application/json
      description: Create new user
      parameters:
        - description: User attributes
          in: body
          name: user_attrs
          required: true
          schema:
            $ref: '#/definitions/model.RegisterUserInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/model.UserResponse'
        '404':
          description: Not Found
          schema:
            type: object
        '409':
          description: Conflict
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Create new user based on paramters
      tags:
        - Users
  /user/{id}:
    delete:
      description: delete user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
      summary: Delete user by ID
      tags:
        - Users
    get:
      description: get a single user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
      summary: Get a single user by ID
      tags:
        - Users
    put:
      consumes:
        - application/json
      description: update user name by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: User name
          in: body
          name: name
          required: true
          schema:
            $ref: '#/definitions/model.UpdateUser'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        '401':
          description: Unauthorized
          schema:
            type: object
        '404':
          description: Not Found
          schema:
            type: object
        '422':
          description: Unprocessable Entity
          schema:
            type: object
      summary: Update user name by ID
      tags:
        - Users
swagger: '2.0'
